name: PR Version Update and Validation Workflow

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  validate_pr_title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq for JSON Processing
        run: sudo apt-get install -y jq

      - name: Validate Pull Request Title
        id: validate_title
        run: |
          pr_title=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          if [[ $pr_title =~ Release ]]; then
            echo "The Pull Request contains the keyword 'Release'. Stopping process."
            exit 0
          elif [[ ! $pr_title =~ (Majeur|Mineur|Patch) ]]; then
            echo "The Pull Request title does not contain the keywords 'Majeur', 'Mineur', or 'Patch'."
            echo "Please include one of these keywords in the title of your Pull Request."
            exit 1
          fi
          echo "::set-output name=title::$pr_title"

  update_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq for JSON Processing
        run: sudo apt-get install -y jq

      - name: Fetch All Branches
        run: git fetch --all

      - name: Checkout Main Branch
        run: git checkout main

      - name: Get Current Version from composer.json
        id: get_version
        run: |
          if [ ! -f composer.json ]; then
            echo "composer.json not found!"
            exit 1
          fi
          current_version=$(jq -r '.version' composer.json)
          if [[ -z "$current_version" || "$current_version" == "null" ]]; then
            current_version="0.0.0"
          fi
          echo "Current version in main branch: $current_version"
          echo "::set-output name=current_version::$current_version"

      - name: Checkout Pull Request Branch
        run: git checkout ${{ github.head_ref }}

      - name: Extract Current PR Title
        id: pr_info
        run: |
          pr_title=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          echo "::set-output name=title::$pr_title"

      - name: Update Version Based on PR Title
        id: update_version
        run: |
          title="${{ steps.pr_info.outputs.title }}"
          version="${{ steps.get_version.outputs.current_version }}"
          if [[ $title == *"Majeur"* ]]; then
              version=$(echo $version | awk -F. '{$1++; $2=0; $3=0} 1' OFS=.)
          elif [[ $title == *"Mineur"* ]]; then
              version=$(echo $version | awk -F. '{$2++; $3=0} 1' OFS=.)
          elif [[ $title == *"Patch"* ]]; then
              version=$(echo $version | awk -F. '{$3++} 1' OFS=.)
          fi
          new_title="${version} - ${title}"
          echo "::set-output name=new_title::$new_title"
          echo "::set-output name=new_version::$version"

      - name: Update Pull Request Title
        run: |
          new_title="${{ steps.update_version.outputs.new_title }}"
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"title\": \"$new_title\"}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number}"

      - name: Update composer.json with New Version
        run: |
          version="${{ steps.update_version.outputs.new_version }}"
          if [ ! -f composer.json ]; then
            echo "composer.json not found!"
            exit 1
          fi
          jq --arg version "$version" '.version = $version' composer.json > tmp.$$.json && mv tmp.$$.json composer.json
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add composer.json
          git commit -m "Update version to $version in composer.json"
          git push origin "HEAD:${{ github.head_ref }}"
